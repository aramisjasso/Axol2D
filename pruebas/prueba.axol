        import Controllers;
    import DesignElements from DesignAxol2D;
    import libreria from ubicacion;

    level MiPrimerNivel  {

        int a;    
        int i = 0 ;
        string cadena = "mi primer cadena";
        boolean bandera = true;
        char c = 'a'; //Error
        int [2] arreglo;
        enemies[2] enemigos;
        int[5] miArreglo = [1, 2, 3, 4, 5];
        int[2][2] matriz2 = [[1, 2], [3, 4]]; 
        enemies[2] enemigos;
        int[5][8] dotMatrix;
        dimensions dm = [1000,  200]; // x , y 200 - 20000    
        background bg = "fondoCastilloBowser.jpg"; //Color o imagen debe de
    // medir lo mismo
        platform pt = Platforms.LavaCastle; //Plataforma en forma de castillo de lava
        backElement portalFinal = "portal.png "; //Imagen de un portal como parte de elemento del fondo principal
        obstacles obs = block[100] ; //Creacion de 100 bloques 
        player py = Players.Mario; // atributo extendido de controllers
        begin b = [5,0]; // donde inicia el personaje extendido de controllers
        finish f = [990,0]; // finalización del nivel en la posición
        lifes life = [100,3]; // cantidad de vidas y cuanta vida tiene cada una
        
        enemies[2] en = [Enemies.Goomba, Enemies.KoopaTropa]; //Se pasa los enemigos
        music ms = "Musica de fondo.mp3";

        method boolean design(int a, byte c) {
            //Posicionamiento de bloques
            obs.positionY(0);
            obs.positionX(100); 
            //elemento de imagen importado
            portalFinal.position(990,0);
            bg.add(portalFinal);	
            en[0].set(10, "Basico");
            en[0].position(200); 
            en[0].getPosition();
            en[1].set(5);
            en[1].position(700);
            puntaje = -b*(b^2-4*a*c)/2;
            if( x < y ){
            en[0].getPosition();
            }
        
            return true;
        }


        method boolean miPrimerMetodo (int a, int b, int c, string d) {
            m2 = m2.set(3, 4);
            m3 = miMetodo(1 + 1, 3);
            
            return true;
        }

        method boolean miPrimerMetodo (int a, int b, int c, string d) {
            m2 = m2.set(3, 4);
            m3 = miMetodo(1 + 1, 3);

            if (i > 0) {
                i = i + 1; 
                a = new Clase();
            } else {
                m3 = miMetodo(1 + 1, 3);  
                if (i > 0) {
                    i = i + 1; 
                    a  = new Clase();
                }
            }

            switch (hola) {
                case hola > 0 :
                    i = i + 1; 
                    break;
                case hola > 0 :
                    i = i + 1; 
                    break;
                case hola > 0 :
                    i = i + 1; 
                    break;
                default :
                    i = i + 1; 
            }

            for (int h = 1; h > 10; i = i + 1) {
                i = i + 1; 
                if (i > 0) {
                    i = i + 1; 
                    a = new Clase();
                }
            }

            while (1 < a) {
                i = i + 1; 
            }

            do while (1 < a) {
                i = i + 1;
                if (i > 0) {
                    i = i + 1; 
                    a = new Clase();
                }
            }

            return true;
        }

        axol2D play() {
            // Contenido del método play
            MiPrimerNivel.start();
        }

    }

